name: NPM Publish

on:
  workflow_call:
    inputs:
      binding_dir:
        required: true
        type: string
      npm_package_name:
        required: true
        type: string
      release_name:
        required: true
        type: string
    secrets:
      NPM_TOKEN:
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Js
        uses: actions/download-artifact@v4
        with:
          name: js
          path: ${{ inputs.binding_dir }}
          merge-multiple: true

      - name: Show js
        shell: bash
        run: |
          ls -R ${{ inputs.binding_dir }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.0
          run_install: false

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: pnpm
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: List packages
        shell: bash
        run: |
          ls -l ${{ inputs.binding_dir }}
          ls -R ${{ inputs.binding_dir }}/artifacts
  
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --strict-peer-dependencies
          

      # TODO: 需要修改
      - name: Create Draft Release
        id: create_release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: ${{ inputs.release_name }}
          tag_name: ${{ github.ref_name }}
          draft: true
          prerelease: false

      - name: NPM Publish
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          pnpm --filter ${{ inputs.npm_package_name }} publish --no-git-checks
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          RELEASE_ID: ${{ steps.create_release.outputs.id }}

      - name: Update Release
        if: startsWith(github.ref, 'refs/tags/')
        run: | 
          echo "Updating release..."
          gh release edit ${{ inputs.release_name }} --draft=false --latest