name: shined-doctor-engine-release
env:
  DEBUG: napi:*
  APP_NAME: doctor
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  CARGO_INCREMENTAL: '1'
  NAPI_DIR: napi/doctor_engine
permissions:
  contents: write
  id-token: write
on:
  release:
    types: [prereleased]
# on:
#   push:
#     branches:
#       - main
  # release:
  #   types: [prereleased, published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          ## macos
          - host: macos-latest
            target: x86_64-apple-darwin
          - host: macos-latest
            target: aarch64-apple-darwin

          # windows x86_64
          - host: windows-latest
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            target: aarch64-pc-windows-msvc

          # linux x86_64
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
          
          #linux arm
          - host: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
          - host: ubuntu-22.04-arm
            target: aarch64-unknown-linux-musl
    
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}


    defaults:
      run:
        working-directory: ${{ env.NAPI_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.NAPI_DIR }}/package-lock.json

      - name: Install rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.settings.target }}
          override: true
          # toolchain: "1.85.0"

      - name: Install dependencies
        run: npm install

      - name: Install musl tools
        if: contains(matrix.settings.target, 'musl') && contains(matrix.settings.host, 'ubuntu-22.04-arm')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools gcc-aarch64-linux-gnu

      - name: Configure ARM64 musl linkage
        # if: contains(matrix.settings.target, 'aarch64') && contains(matrix.settings.target, 'musl')
        if: contains(matrix.settings.target, 'musl') && contains(matrix.settings.host, 'ubuntu-22.04-arm')
        run: |
          # 创建必要的目录和软链接
          sudo ln -s /usr/lib/aarch64-linux-gnu/libgcc_s.so.1 /usr/lib/aarch64-linux-musl/libgcc_s.so.1
          # 设置环境变量指定链接器
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Enable long paths on Windows
        if: contains(matrix.settings.host, 'windows')
        run: |
          git config --system core.longpaths true
        shell: bash

      - name: Build
        run: npm run build -- --target ${{ matrix.settings.target }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.NAPI_DIR }}/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  publish:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.NAPI_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.NAPI_DIR }}/artifacts
          merge-multiple: true
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.NAPI_DIR }}/package-lock.json
      - name: List packages
        run: |
          ls -l
          ls -R ./artifacts
          npm i
          npm run create-npm-dirs
          npm run artifacts
          ls -R ./artifacts
          ls -R ./npm
          npm run build:js
          ls -l
        shell: bash
      - name: Publish
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm config set provenance true
          npm publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          RELEASE_ID: ${{ github.event.release.id }}
  released:
      name: released
      runs-on: ubuntu-latest
      needs:
        - publish
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Update release
          uses: softprops/action-gh-release@v2
          if: startsWith(github.ref, 'refs/tags/')
          with:
            prerelease: false
            draft: false
            make_latest: true
