name: shined-doctor-engine-release
env:
  DEBUG: napi:*
  APP_NAME: doctor
  # 如果没有的话 napi prepublish 会报错
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # MACOSX_DEPLOYMENT_TARGET: '10.13'
  # CARGO_INCREMENTAL: '1'
  NAPI_DIR: napi/doctor_engine
  CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: true
permissions:
  contents: write
  id-token: write

on:
  push:
    tags:
      - "v*"
# on:
#   release:
#     # types: [prereleased]
#     types: [published]
# on:
#   push:
#     branches:
#       - main
  # release:
  #   types: [prereleased, published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        settings:
          # linux x86_64
          # - host: ubuntu-20.04
          #   target: x86_64-unknown-linux-gnu
          # - host: ubuntu-20.04
          #   target: x86_64-unknown-linux-musl
          
          # - host: ubuntu-22.04
          #   target: x86_64-unknown-linux-gnu
          # - host: ubuntu-22.04
          #   target: x86_64-unknown-linux-musl

          # - host: ubuntu-24.04
          #   target: x86_64-unknown-linux-gnu
          # - host: ubuntu-24.04
          #   target: x86_64-unknown-linux-musl

          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian

          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine

          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
              
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine-zig
    
    name: ${{ matrix.settings.host }} - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}

    defaults:
      run:
        working-directory: ${{ env.NAPI_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.NAPI_DIR }}/package-lock.json
      - name: Install dependencies
        run: npm install

      # - name: Setup Zig
      #   uses: goto-bus-stop/setup-zig@v2
      #   with:
      #     version: 0.11.0

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: |
            set -e 
            rustup target add ${{ matrix.settings.target }}
            ls -l
            cd ./napi/doctor_engine
            ls -l
            npm run build -- --target ${{ matrix.settings.target }}



      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.NAPI_DIR }}/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  build-macos:
    strategy:
      fail-fast: false
      matrix:
        settings:
          ## macos
          - host: macos-latest
            target: x86_64-apple-darwin
          - host: macos-latest
            target: aarch64-apple-darwin
      
    name: ${{ matrix.settings.host }} - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}

    defaults:
      run:
        working-directory: ${{ env.NAPI_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.NAPI_DIR }}/package-lock.json

      - name: Install rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.settings.target }}
          override: true

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build -- --target ${{ matrix.settings.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.NAPI_DIR }}/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  build-windows:
    strategy:
      fail-fast: false
      matrix:
        settings:
          # windows x86_64
          - host: windows-latest
            target: x86_64-pc-windows-msvc
          # napi 在windows 上只支持 msvc
          # - host: windows-latest
          #   target: x86_64-pc-windows-gnu
          - host: windows-latest
            target: aarch64-pc-windows-msvc
          # aarch64-pc-windows-gnu 不是标准支持的目标平台
          # - host: windows-latest
          #   target: aarch64-pc-windows-gnu

    name: ${{ matrix.settings.host }} - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}

    defaults:
      run:
        working-directory: ${{ env.NAPI_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.NAPI_DIR }}/package-lock.json

      - name: Install rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.settings.target }}
          override: true

      - name: Enable long paths on Windows
        if: contains(matrix.settings.host, 'windows')
        run: |
          git config --system core.longpaths true
        shell: bash

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build -- --target ${{ matrix.settings.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.NAPI_DIR }}/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
        
        
  
  publish:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.NAPI_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.NAPI_DIR }}/artifacts
          merge-multiple: true
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.NAPI_DIR }}/package-lock.json
      - name: List packages
        run: |
          ls -l
          ls -R ./artifacts
          npm i
          npm run create-npm-dirs
          npm run artifacts
          ls -R ./artifacts
          ls -R ./npm
          npm run build:js
          ls -l
        shell: bash

      - name: Create Draft Release
        id: create_release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          draft: true
          prerelease: false

      - name: Publish
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm config set provenance true
          npm publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          RELEASE_ID: ${{ steps.create_release.outputs.id }}

      - name: Update Release
        if: startsWith(github.ref, 'refs/tags/')
        run: | 
          echo "Updating release..."
          gh release edit ${{ github.ref_name }} --draft=false --latest

  # released:
  #     name: released
  #     runs-on: ubuntu-latest
  #     needs:
  #       - publish
  #     steps:
  #       - name: Checkout
  #         uses: actions/checkout@v4
  #       - name: Update release
  #         uses: softprops/action-gh-release@v2
  #         if: startsWith(github.ref, 'refs/tags/')
  #         with:
  #           prerelease: false
  #           draft: false
  #           make_latest: true
