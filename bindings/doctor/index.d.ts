/* auto-generated by NAPI-RS */
/* eslint-disable */
export interface Diagnostic {
  fileName: string
  help: string
  url: string
  severity: string
  code: string
  message: string
  labels: Array<LabeledLoc>
}

export declare function doctor(cwd: string, opts?: DoctorOptions | undefined | null): Promise<Array<NapiMessages>>

export interface DoctorOptions {
  verbose?: boolean
  maxRenderCount?: number
  withDashboard?: boolean
}

export declare function getLanguagesStatistics(paths: Array<string>): Array<LanguageStatistics>

export interface GlobJsArgs {
  ignore?: Array<string>
  cwd: string
  verbose?: boolean
  absolute?: boolean
  globals?: Record<string, string>
}

export declare function initializeLogger(level?: LogLevel | undefined | null): void

export declare function innerDebugLint(oxlintConfig: string, globJsArgs: GlobJsArgs): Promise<Array<Diagnostic>>

export declare function innerLint(globJsArgs: GlobJsArgs, category: NaPiCategory): Promise<Array<Diagnostic>>

export interface LabeledLoc {
  span: Span
  loc: Location
}

export interface Location {
  start: Position
  end: Position
}

export declare const enum LogLevel {
  Error = 'Error',
  Warn = 'Warn',
  Info = 'Info',
  Debug = 'Debug',
  Trace = 'Trace'
}

export declare const enum NaPiCategory {
  V20250601Inner = 0
}

export interface NapiDiagnostics {
  message: string
  code?: string
  severity?: NapiSeverity
  help?: string
  url?: string
  labels?: Array<NapiLabeledSpan>
}

export interface NapiLabeledSpan {
  label?: string
  span: NapiSourceSpan
  primary: boolean
}

export interface NapiMessages {
  sourcePath: string
  diagnostics: Array<NapiDiagnostics>
}

export declare const enum NapiSeverity {
  Error = 'Error',
  Warning = 'Warning',
  Advice = 'Advice'
}

export interface NapiSourceSpan {
  offset: number
  length: number
}

export interface Position {
  line: number
  col: number
}

export interface Response {
  rc: string
  map: Record<string, number>
}

export interface Span {
  offset: number
  length: number
}
